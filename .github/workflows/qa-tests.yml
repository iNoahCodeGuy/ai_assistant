name: Quality Assurance Tests

# Purpose: Core quality assurance - conversation quality + documentation alignment
# Related: code-display-tests.yml (feature-specific validation with matrix testing)
# Both workflows required to pass before merging (see branch protection rules)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  conversation-quality:
    name: Conversation Quality Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run conversation quality tests
        run: |
          pytest tests/test_conversation_quality.py -v --tb=short --cov=src --cov-report=term-missing
        continue-on-error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: conversation-quality-results
          path: |
            .coverage
            htmlcov/

  documentation-alignment:
    name: Documentation Alignment Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run documentation alignment tests
        run: |
          pytest tests/test_documentation_alignment.py -v --tb=short
        continue-on-error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: documentation-alignment-results
          path: |
            .coverage
            htmlcov/

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [conversation-quality, documentation-alignment]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "## Quality Assurance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Suites" >> $GITHUB_STEP_SUMMARY
          echo "- **Conversation Quality Tests**: ${{ needs.conversation-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation Alignment Tests**: ${{ needs.documentation-alignment.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.conversation-quality.result }}" != "success" ] || [ "${{ needs.documentation-alignment.result }}" != "success" ]; then
            echo "❌ **Quality checks failed.** Review the logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **All quality checks passed!**" >> $GITHUB_STEP_SUMMARY
          fi
