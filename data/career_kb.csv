Question,Answer
Walk me through your career so far.,"Noah started his sales career working in gyms in his early 20s honing his sales skills, moved into Residential Real Estate and logistics, and later joined Tesla in 2024 where he intends to pivot into a tech role. At the same time Noah pursued a career in Mixed Martial Arts, becoming a veteran of 10 cage fights."
Why did you transition from Tesla Sales to Tech/AI projects?,"Noah grew up playing chess competitively. In 2017 while attending college at UNLV, before he had any technical knowledge, he watched the games between Stockfish and AlphaZero. He recognized that Stockfish focused on material advantage, while AlphaZero sacrificed pieces for relentless pressure and long-term initiative. This sparked Noah’s interest in artificial intelligence, as AlphaZero seemed to grasp advantages difficult to quantify. In August 2024 while on vacation in San Diego, Noah reflected on his screen time and decided he would learn to code if he was going to spend much of his life on screens. A month later, Noah pursued a sales job in tech, joining Tesla in November 2024."
What’s the biggest project you’ve worked on?,Noah has developed a chatbot with a knowledge base of his career and skills. He has also collaborated with project managers at Tesla in implementing Generative AI applications aimed at improving internal efficiency and customer experience.
What technical skills do you have?,"Programming & Development: Python (intermediate), basic front-end development (HTML), Git/GitHub for version control. AI & Data Tools: Familiar with machine learning workflows (RAG, fine-tuning, vector databases like Pinecone/FAISS, LangChain), basic model deployment, and data visualization (Matplotlib, Pandas). Software & Productivity: SQL for querying data, Excel/Google Sheets (advanced formulas, pivot tables), CRM tools, and project management platforms. Leverages AI coding assistants such as GitHub Copilot and Claude Code to accelerate development, troubleshoot errors, and explore best practices. Other Technical Skills: Setting up virtual environments, working with APIs, and building prototypes of AI/automation tools."
How strong is Noah’s Python?,"Noah’s Python skills are at an intermediate level. He is comfortable with libraries like Pandas and Matplotlib, working with APIs, and building automation pipelines. He has applied Python to projects such as a call summarizer prototype and this career knowledge base chatbot. He applies Python daily and is progressing quickly toward advanced applications."
What projects has Noah built with AI?,Noah has developed a chatbot with a knowledge base of his career and skills. He also built a prototype of a program that integrates speech-to-text with a large language model to generate call summaries.
Does Noah have experience with LangChain and RAG?,"Yes, Noah has hands-on experience with LangChain and Retrieval-Augmented Generation (RAG) workflows for prototyping knowledge retrieval tools."
Tell me about a time Noah solved a problem no one else could.,Example stories can be expanded here.
How did Noah use AI to improve sales workflows?,"Noah has explored AI use cases for sales, particularly leveraging speech-to-text and LLMs to reduce manual note-taking and improve follow-up accuracy."
What metrics did Noah impact at Tesla?,"Noah has consistently generated strong sales performance, ranking among the top closers, while contributing to discussions on AI-driven efficiency improvements."
How does Noah work with project managers or engineers?,"Noah collaborates with project managers on generative AI initiatives, providing feedback from the sales perspective and ensuring that solutions align with business needs and customer experience goals."
What role does Noah usually play in a team project?,"Noah often acts as a bridge between business and technical teams, ensuring alignment between user needs and technical feasibility. He contributes both domain knowledge and growing technical expertise."
How does Noah explain technical ideas to non-technical people?,"Noah breaks down technical ideas into digestible parts with relatable comparisons. For example, he explains a call summarizer as 'a transcript generator paired with an AI that condenses key points into a digestible summary.'"
Why does Noah want to transition into software/AI?,"Noah has seen firsthand how AI can transform workflows. He is motivated to combine his sales background with technical skills to build scalable, impactful tools."
Where does Noah see himself in 3 years?,"In three years, Noah sees himself working as a software engineer specializing in AI/ML deployment, ideally in projects that bridge technical innovation with business value."
Why should a company hire Noah over another candidate with a CS degree?,"Noah combines hands-on technical skills with real-world sales expertise at Tesla. He understands both technical solutions and business impact, positioning him to deliver measurable results."
What excites Noah most about working here?,Noah is excited by opportunities to apply his AI/ML skills in dynamic environments where innovation directly improves workflows and customer experiences.
Where can I see Noah’s GitHub?,You can view Noah’s GitHub portfolio here: https://github.com/iNoahCodeGuy
Where can I see Noah’s LinkedIn?,You can view Noah’s LinkedIn profile here: https://www.linkedin.com/in/noah-de-la-calzada-250412358/
What is Noah's background in Mixed Martial Arts?,"Noah is a veteran of 10 MMA fights: 8 amateur (including 2 amateur title fights, one of which he won by defeating 5-0 Edgar Sorto for the Fierce Fighting Championship's 135lb title) and 2 professional fights. One of his professional fights can be viewed here: https://youtu.be/MgcAdEoJMzg?si=LHvKffoArGlPDR25"
What are Noah's software engineering skills?,"Noah has intermediate Python skills with experience in building production applications using modern AI/ML frameworks. He works with LangChain for RAG pipelines, implements vector databases (Supabase pgvector, Pinecone, FAISS), and builds full-stack applications with Streamlit frontends and Flask/Vercel serverless backends. He uses Git/GitHub for version control, implements CI/CD pipelines, and follows software engineering best practices including modular code design, error handling, logging, and observability (LangSmith). He's proficient in API integration (OpenAI, Supabase, Resend, Twilio), environment configuration management, and cloud deployment (Vercel). Noah leverages AI coding assistants (GitHub Copilot, Claude) to accelerate development and learn best practices."
What engineering principles does Noah follow?,"Noah follows production-ready engineering principles: (1) Modular architecture - breaking large files into focused, single-responsibility modules under 200 lines, (2) Observability - integrating LangSmith tracing, Supabase analytics, and structured logging for debugging and performance monitoring, (3) Error handling - graceful degradation with try/except blocks and fallback behaviors, (4) Documentation - comprehensive docstrings, README files, and inline comments for maintainability, (5) Version control - meaningful commit messages and incremental development, (6) Testing - writing unit tests and validation scripts, (7) Configuration management - environment variables and settings classes for different deployment contexts, (8) User-centered design - role-based personalization and adaptive conversation flows. He prioritizes code clarity, junior developer onboarding, and enterprise-grade reliability."
How does Noah approach system architecture?,"Noah designs systems with clear separation of concerns and scalable patterns. For Portfolia, he implemented: (1) Data Layer - Supabase PostgreSQL with pgvector for embeddings, centralized analytics, and user interactions, (2) Retrieval Layer - RAG engine with semantic search using OpenAI embeddings and similarity scoring, (3) Orchestration Layer - LangGraph-style conversation flow with modular nodes (classify → retrieve → generate → plan → execute → log), (4) Presentation Layer - Role-aware response formatting adapting to technical vs business audiences, (5) External Services - Modular service pattern for email (Resend), SMS (Twilio), and file storage with graceful degradation, (6) Observability - LangSmith integration for tracing every LLM call with latency and cost tracking. His architecture prioritizes horizontal scaling on serverless (Vercel), minimal cold start times, and observable debugging."
What does Noah understand about production GenAI systems?,"Noah understands the unique challenges of production GenAI systems: (1) Grounding & Accuracy - Using RAG to prevent hallucinations by retrieving factual context before generation, (2) Cost Management - Tracking token usage, optimizing prompt length, and selecting appropriate models (GPT-4o-mini vs GPT-4), (3) Latency - Async operations, caching strategies, and efficient vector search with proper indexing, (4) Observability - Tracing every LLM call with LangSmith to debug failures, measure performance, and evaluate quality, (5) Reliability - Retry logic, fallback responses, and error handling for API failures, (6) Context Management - Maintaining conversation history, role context, and retrieval snippets within token limits, (7) Evaluation - LLM-as-judge for faithfulness checking and answer quality scoring, (8) Governance - Logging all interactions for audit trails, PII handling, and data privacy. He's built these patterns into Portfolia as a learning platform that teaches GenAI best practices through its own implementation."
What GenAI patterns has Noah implemented?,"Noah has implemented several production GenAI patterns: (1) Retrieval-Augmented Generation (RAG) - Semantic search with pgvector to ground answers in factual knowledge base, (2) Multi-stage LangGraph pipelines - Sequential nodes for classification, retrieval, generation, action planning, and logging, (3) Role-based prompting - Dynamic system prompts that adapt to user type (technical vs business audiences), (4) Few-shot learning - Providing examples in prompts to guide response formatting, (5) Conversation memory - Maintaining chat history for context-aware follow-up questions, (6) Streaming responses - Real-time token generation for better UX, (7) Hybrid retrieval - Combining keyword search and semantic similarity, (8) Query classification - Intent detection to route different query types to appropriate handlers, (9) Action planning - LLM-driven decision making to trigger side effects (email, SMS, data logging), (10) Graceful degradation - Fallback responses when retrieval fails or context is insufficient. These patterns demonstrate his understanding of how enterprises build reliable, scalable GenAI applications."
How does Noah debug and troubleshoot applications?,"Noah uses systematic debugging approaches: (1) Structured logging - Logger statements at key checkpoints with severity levels (INFO, WARNING, ERROR), (2) Observability tools - LangSmith for tracing LLM calls with full prompt/response inspection and latency tracking, (3) Analytics queries - Supabase SQL queries to analyze user interactions, failure patterns, and performance bottlenecks, (4) Git bisect - Using version control to identify when regressions were introduced, (5) Unit tests - Writing test cases that reproduce bugs and validate fixes, (6) Error handling patterns - Try/except blocks that log full tracebacks with context, (7) Print debugging - Strategic print statements in development to inspect state, (8) Vercel logs - Reviewing serverless function logs to debug production issues, (9) User feedback analysis - Reviewing failed interactions and low-quality responses to improve retrieval and prompts, (10) Incremental testing - Making small changes and validating immediately rather than large refactors. He documents solutions in commit messages and README files to build institutional knowledge."
